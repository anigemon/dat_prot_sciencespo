mne$takeover <- 0
mne[grep("Company Takeover", as.character(mne$DealAttributes), value=F),"takeover"] <- 1
mne$minority <- 0
mne$majority <- 0
mne[grep("Minority purchase", as.character(mne$DealAttributes), value=F),"minority"] <- 1
mne[grep("Majority purchase", as.character(mne$DealAttributes), value=F),"majority"] <- 1
mne <- cbind(mne,model.matrix( ~ Type - 1, data=mne ))
colnames(mne)[which(colnames(mne)=='TypeM&A')] <- 'TypeMNA'
mne.s <-aggregate(cbind(takeover,majority,minority,TypeINV,TypeJV,TypeMNA)~cut(AnnounceDate,"1 year"), mne, sum)
colnames(mne.s)
colnames(mne.s)[which(colnames(mne.s)=="cut(AnnounceDate, \"1 year\")")] <- "date"
mne.s <- gather(mne.s[,c("takeover","majority","minority")], kind, number,-date)
colnames(mne.s)
gather(mne.s[,c("takeover","majority","minority")], kind, number,-date)
mne.d <- gather(mne.s[,c("takeover","majority","minority")], key=kind, value=number,-date)
mne.d <- gather(mne.s[,c("takeover","majority","minority")], key=kind, value=number)
mne.d
mne.d <- gather(mne.s[,c("takeover","majority","minority","date")], key=kind, value=number,-date)
mne.d
library(ggplot)
library(ggplot2)
ggplot(mne.d, aes(date, number)) + geom_line() +
scale_x_date(format = "%Y-%M-%D") + xlab("") + ylab("Daily Views")
ggplot(mne.d, aes(date, number)) + geom_line()
class(mne.d$date)
?as.Date
as.Date(mne.d$date, "%Y-%m-%d")
mne.d$date <- as.Date(mne.d$date, "%Y-%m-%d")
ggplot(mne.d, aes(date, number)) + geom_line() +
scale_x_date(format = "%Y-%M-%D") + xlab("") + ylab("Daily Views")
ggplot(mne.d, aes(date, number)) + geom_line() +
scale_x_date(format = "%Y-%m-%d") + xlab("") + ylab("Daily Views")
ggplot(mne.d, aes(date, number)) + geom_line()
ggplot(mne.d, aes(date, number),fill=kind) + geom_line() +
scale_x_date(format = "%Y-%m-%d") + xlab("") + ylab("Daily Views")
ggplot(mne.d, aes(date, number),fill=kind) + geom_line()
ggplot(mne.d, aes(date, number,fill=kind)) + geom_line()
ggplot(mne.d, aes(date, number,group=kind)) + geom_line() +
scale_x_date(format = "%Y-%m-%d") + xlab("") + ylab("Daily Views")
ggplot(mne.d, aes(date, number,group=kind)) + geom_line()
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line()
mne.t <- gather(mne.s[,c("TypeINV","TypeJV","TypeMNA","date")], key=kind, value=number,-date)
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line() +
+ xlab("") + ylab("Daily Views")
ggplot(mne.t, aes(date, number,colour=kind)) + geom_line() + xlab("") + ylab("Daily Views")
mne.t
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("") + ylab("Daily Views")
mne.t$date <- as.Date(mne.d$date, "%Y-%m-%d")
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("") + ylab("Daily Views")
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1)
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_fill_discrete(name="Purchase Attributes",
breaks=c("majority", "minority", "takeover"),
labels=c("Majority Purchase", "Minority Purchase", "Takeover"))
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_colour_discrete(name="Purchase Attributes",
breaks=c("majority", "minority", "takeover"),
labels=c("Majority Purchase", "Minority Purchase", "Takeover"))
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_colour_discrete(name="Dealt Type",
breaks=c("TypeINV", "TypeMNA", "TypeJV"),
labels=c("Investment", "M&A", "Joint Venture"))
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_colour_discrete(name="Deal Type",
breaks=c("TypeINV", "TypeMNA", "TypeJV"),
labels=c("Investment", "M&A", "Joint Venture"))
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1)
head(rev)
rev
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1)
head(rev)
grep("(.+)[0-9]{4}",colnames(rev),value=T)
grep("(.+)(.)[0-9]{4}",colnames(rev),value=T)
grep("(.+)([.])[0-9]{4}",colnames(rev),value=T)
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-
gsub("(.+)([.])[0-9]{4}","\2",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-
gsub("(.+)([.])[0-9]{4}","\2",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]
colnames(rev)
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1)
gsub("(.+)([.])[0-9]{4}","\2",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
gsub("(.+)([.])[0-9]{4}","\\2",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
gsub("(.+)([.])[0-9]{4}","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
colnames(rev)
rev[,"NA."]
rev <- rev[,-which(colnames(rev)=="NA.")]
colnames(rev)
rev
?sum
sum(rev$`2006`, na.rm=T)
rev$`2006`
?read.xlsx
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev <- rev[,-which(colnames(rev)=="NA.")]
sum(rev$`2006`, na.rm=T)
sum(rev$`2006data.frame(wifi[1:3], apply(wifi[4:9],2, A) )
`, na.rm=T)
data.frame(rev[1], apply(rev[4:9],2, as.numeric) )
data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
rev <- data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev
grep(["^0-9]{4}$",colnames(rev))
grep("^[0-9]{4}$",colnames(rev))
rev[,grep("^[0-9]{4}$",colnames(rev))]
grep("^[0-9]{4}$",colnames(rev),value = T)
rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))]
gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
rev <- gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
rev
ggplot(rev, aes(date, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")+
scale_x_date(format = "%Y") # +
ggplot(rev, aes(date, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")
rev
rev1 <- gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
rev <- data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev1 <- gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
ggplot(rev1, aes(date, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")+
scale_x_date(format = "%Y") # +
ggplot(rev1, aes(date, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")
rev1
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")+
scale_x_date(format = "%Y") # +
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")
data.frame(rev1[1], apply(rev[2:ncol(rev)],2, as.numeric) )
data.frame(rev1[1], apply(rev1[2:ncol(rev1)],2, as.numeric) )
rev1 <- data.frame(rev1[1], apply(rev1[2:ncol(rev1)],2, as.numeric) )
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")+scale_colour_brewer(palette = "Set1")
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line() + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line()+geom_point() + xlab("Year") + ylab("Revenue (in billions of EUR)")
?geom_point
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")
rev1$billions < 10000
rev1$Revenue[rev1$billions < 10000] <- "Other"
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")
rev1
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
rev <- data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev1 <- gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
rev1 <- data.frame(rev1[1], apply(rev1[2:ncol(rev1)],2, as.numeric) )
rev1$Revenue[rev1$billions < 1000] <- "Other"
ggplot(rev1, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(rev1, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(rev1, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")
summary(rev1)
summary(rev1$Revenue)
rev1$Revenue
rev1$Revenue[rev1$billions < 1500] <- "Other"
ggplot(rev1, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")
which(rev1$Revenue %in% c("Total","United States", "Germany"))
rev1$Revenue
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
rev <- trimws(rev)
rev <- data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev
rev <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Revenues.xlsx", sheetIndex = 1,stringsAsFactors=F)
trimws(rev)
apply(rev,trimws)
apply(rev,fun=trimws)
apply(rev,2,FUN=trimws)
as.data.frame(apply(rev,2,FUN=trimws))
rev <- as.data.frame(apply(rev,2,FUN=trimws))
rev <- data.frame(rev[1], apply(rev[2:ncol(rev)],2, as.numeric) )
colnames(rev)[grep("(.+)([.])[0-9]{4}",colnames(rev))]<-gsub("(.+)([.])([0-9]{4})","\\3",grep("(.+)([.])[0-9]{4}",colnames(rev),value=T))
rev1 <- gather(rev[,c("Revenue",grep("^[0-9]{4}$",colnames(rev),value = T))], key=year, value=billions,-Revenue)
rev1 <- data.frame(rev1[1], apply(rev1[2:ncol(rev1)],2, as.numeric) )
which(rev1$Revenue %in% c("Total","United States", "Germany"))
rev2 <- which(rev1$Revenue %in% c("Total","United States", "Germany"))
ggplot(rev2, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")
rev2
rev2 <- rev1[which(rev1$Revenue %in% c("Total","United States", "Germany")),]
ggplot(rev2, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(mne.d, aes(date, number,colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_colour_discrete(name="Purchase Attributes",
breaks=c("majority", "minority", "takeover"),
labels=c("Majority Purchase", "Minority Purchase", "Takeover"))
ggplot(mne.t, aes(date, number, colour=kind)) + geom_line() + xlab("Year") + ylab("Number of Deals")+
scale_colour_discrete(name="Deal Type",
breaks=c("TypeINV", "TypeMNA", "TypeJV"),
labels=c("Investment", "M&A", "Joint Venture"))
ggplot(rev2, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")
ggplot(rev2, aes(year, billions, colour=as.character(Revenue))) + geom_line()+geom_point(aes(shape=as.character(Revenue))) + xlab("Year") + ylab("Revenue (in billions of EUR)")+
scale_colour_discrete(name="Revenue")
ggplot(rev2, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")
own <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Ownership.xlsx", sheetIndex = 1)
ggplot(rev2, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")+
head(own)
ggplot(rev2, aes(year, billions, colour=Revenue)) + geom_line()+geom_point(aes(shape=Revenue)) + xlab("Year") + ylab("Revenue (in billions of EUR)")+
head(own)
head(own)
sub <- read.xlsx(file="/Users/Vlad/Desktop/deutschetelekom/DTE - Subsidiary List.xlsx", sheetIndex = 1)
head(sub)
library(stargazer)
stargazer(sub)
library(Hmisc)
isntall.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
latex(sub, file="")
x <- read.table("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/1.txt")
install.packages("readtext")
install.packages("readtext")
install.packages("readtext")
install.packages("readtext")
library(readtext)
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/1.txt")
x
View(x)
x[,2]
View(x)
x <- as.String(x[,2])
library(stringr)
x <- as.String(x[,2])
library(stringi)
x <- as.String(x[,2])
??as.String
library(xtable)
x <- as.String(x[,2])
x <- as.string(x[,2])
install.packages(openNLP)
install.packages("openNLP")
library(openNLP)
x <- as.String(x[,2])
??as.String
library(NLP)
x <- as.String(x[,2])
x
?as.String
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator())
)
POSAnnotation <- annotate(x, Maxent_POS_Tag_Annotator(), wordAnnotation)
POSwords <- subset(POSAnnotation, type == "word")
tags <- sapply(POSwords$features, '[[', "POS")
tokenizedAndTagged <- data.frame(Tokens = x[POSwords], Tags = tags)
tokenizedAndTagged
head(tokenizedAndTagged)
tokenizedAndTagged$Tags_mod = grepl("NN|JJ", tokenizedAndTagged$Tags)
chunk = vector()
chunk[1] = as.numeric(tokenizedAndTagged$Tags_mod[1])
for (i in 2:nrow(tokenizedAndTagged)) {
if(!tokenizedAndTagged$Tags_mod[i]) {
chunk[i] = 0
} else if (tokenizedAndTagged$Tags_mod[i] == tokenizedAndTagged$Tags_mod[i-1]) {
chunk[i] = chunk[i-1]
} else {
chunk[i] = max(chunk) + 1
}
}
text_chunk <- split(as.character(tokenizedAndTagged$Tokens), chunk)
tag_pattern <- split(as.character(tokenizedAndTagged$Tags), chunk)
names(text_chunk) <- sapply(tag_pattern, function(x) paste(x, collapse = "-"))
res = text_chunk[grepl("JJ-NN|NN.-NN", names(text_chunk))]
res
class(res)
length(res)
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/2.pdf")
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/2.pdf")
install.packages("Rcpp")
install.packages("Rcpp")
library("Rcpp")
library("Rcpp")
update.packages("Rcpp")
library("Rcpp")
library("Rcpp")
library(readtext)
library(stringr)
library(stringi)
library(xtable)
library(NLP)
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/2.pdf")
View(x)
x <- as.String(x[,2])
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator()))
POSAnnotation <- annotate(x, Maxent_POS_Tag_Annotator(), wordAnnotation)
POSwords <- subset(POSAnnotation, type == "word")
# Extract the tags from the words
tags <- sapply(POSwords$features, '[[', "POS")
tokenizedAndTagged <- data.frame(Tokens = x[POSwords], Tags = tags)
tokenizedAndTagged$Tags_mod = grepl("NN|JJ", tokenizedAndTagged$Tags)
# Initialize a vector to store chunk indexes
chunk = vector()
# Iterate thru each word and assign each one to a group
# if the word doesn’t belong to NN|JJ tags (i.e. tags_mod flag is 0) assign it to the default group (0)
# If the ith tag is in “NN|JJ” (i.e. tags_mod flag is 1) assign it to group i-1 if the (i-1)th tag_mod flag is also 1; else assign it to a new group
chunk[1] = as.numeric(tokenizedAndTagged$Tags_mod[1])
for (i in 2:nrow(tokenizedAndTagged)) {
if(!tokenizedAndTagged$Tags_mod[i]) {
chunk[i] = 0
} else if (tokenizedAndTagged$Tags_mod[i] == tokenizedAndTagged$Tags_mod[i-1]) {
chunk[i] = chunk[i-1]
} else {
chunk[i] = max(chunk) + 1
}
}
# Split and chunk words
text_chunk <- split(as.character(tokenizedAndTagged$Tokens), chunk)
tag_pattern <- split(as.character(tokenizedAndTagged$Tags), chunk)
names(text_chunk) <- sapply(tag_pattern, function(x) paste(x, collapse = "-"))
# Extract chunks matching pattern
# We will extract JJ-NN chunks and two or more continuous NN tags
# "NN.-NN" -> The "." in this regex will match all variants of NN: NNP, NNS etc
res = text_chunk[grepl("JJ-NN|NN.-NN", names(text_chunk))]
length(res)
x <- as.String(x[,2])
library("Rcpp")
library(readtext)
library(stringr)
library(stringi)
library(xtable)
library(NLP)
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/2.pdf")
x <- as.String(x[,2])
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator()))
POSAnnotation <- annotate(x, Maxent_POS_Tag_Annotator(), wordAnnotation)
POSwords <- subset(POSAnnotation, type == "word")
# Extract the tags from the words
tags <- sapply(POSwords$features, '[[', "POS")
tokenizedAndTagged <- data.frame(Tokens = x[POSwords], Tags = tags)
tokenizedAndTagged$Tags_mod = grepl("NN|JJ", tokenizedAndTagged$Tags)
# Initialize a vector to store chunk indexes
chunk = vector()
# Iterate thru each word and assign each one to a group
# if the word doesn’t belong to NN|JJ tags (i.e. tags_mod flag is 0) assign it to the default group (0)
# If the ith tag is in “NN|JJ” (i.e. tags_mod flag is 1) assign it to group i-1 if the (i-1)th tag_mod flag is also 1; else assign it to a new group
chunk[1] = as.numeric(tokenizedAndTagged$Tags_mod[1])
for (i in 2:nrow(tokenizedAndTagged)) {
if(!tokenizedAndTagged$Tags_mod[i]) {
chunk[i] = 0
} else if (tokenizedAndTagged$Tags_mod[i] == tokenizedAndTagged$Tags_mod[i-1]) {
chunk[i] = chunk[i-1]
} else {
chunk[i] = max(chunk) + 1
}
}
# Split and chunk words
text_chunk <- split(as.character(tokenizedAndTagged$Tokens), chunk)
tag_pattern <- split(as.character(tokenizedAndTagged$Tags), chunk)
names(text_chunk) <- sapply(tag_pattern, function(x) paste(x, collapse = "-"))
# Extract chunks matching pattern
# We will extract JJ-NN chunks and two or more continuous NN tags
# "NN.-NN" -> The "." in this regex will match all variants of NN: NNP, NNS etc
res = text_chunk[grepl("JJ-NN|NN.-NN", names(text_chunk))]
length(res)
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator()))
library(NLP)
x <- as.String(x[,2])
x <- readtext("/Users/Vlad/Google_Drive/SCIENCESPO/FALL2017/dat_priv_dig_sec/r/class2/texts/2.pdf")
x <- as.String(x[,2])
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator()))
library(openNLP)
wordAnnotation <- annotate(x, list(Maxent_Sent_Token_Annotator(), Maxent_Word_Token_Annotator()))
POSAnnotation <- annotate(x, Maxent_POS_Tag_Annotator(), wordAnnotation)
POSwords <- subset(POSAnnotation, type == "word")
tags <- sapply(POSwords$features, '[[', "POS")
tokenizedAndTagged <- data.frame(Tokens = x[POSwords], Tags = tags)
tokenizedAndTagged$Tags_mod = grepl("NN|JJ", tokenizedAndTagged$Tags)
chunk = vector()
chunk[1] = as.numeric(tokenizedAndTagged$Tags_mod[1])
for (i in 2:nrow(tokenizedAndTagged)) {
if(!tokenizedAndTagged$Tags_mod[i]) {
chunk[i] = 0
} else if (tokenizedAndTagged$Tags_mod[i] == tokenizedAndTagged$Tags_mod[i-1]) {
chunk[i] = chunk[i-1]
} else {
chunk[i] = max(chunk) + 1
}
}
text_chunk <- split(as.character(tokenizedAndTagged$Tokens), chunk)
tag_pattern <- split(as.character(tokenizedAndTagged$Tags), chunk)
names(text_chunk) <- sapply(tag_pattern, function(x) paste(x, collapse = "-"))
res = text_chunk[grepl("JJ-NN|NN.-NN", names(text_chunk))]
length(res)
res
??sample
?sample
sample(0:101, 300)
sample(0:101, 300, replace=T)
save.csv
??save.csv
??save
?save
write.csv((sample(0:101, 300, replace=T)), file="numbers.csv")
(sample(0:101, 300, replace=T))[1]
(sample(0:101, 300, replace=T))[2]
(sample(0:101, 300, replace=T))[3]
(sample(0:101, 300, replace=T))[4]
(sample(0:101, 300, replace=T))[5]
x <-(sample(0:101, 300, replace=T))
write.csv(x, file="numbers.csv")
install.packages("twitteR")
library(twitteR)
?twitteR
??twitteR
consumer_secret <- "ZK6RaAvhQVte1J1RBj55BDzvdz6aeaA6PpLf0cWdWPm7a9E2lU"
consumer_key <- "HlD2iZZQkuAJ2f9BoJhBCA3mO"
getTwitterOAuth(consumer_key, consumer_secret)
?setup_twitter_oauth
setup_twitter_oauth(consumer_key, consumer_secret)
access_secret <- "T6nLdFXeqRT3EAHzhH0YDmY9IVg6MVOIROUhaPCjp4a8z"
access_token <- "2416344931-PS4bFHo5esnk3G3SH0OyRCOxgy5gpn8PQY58XJY"
consumer_key <- "HlD2iZZQkuAJ2f9BoJhBCA3mO"
consumer_secret <- "ZK6RaAvhQVte1J1RBj55BDzvdz6aeaA6PpLf0cWdWPm7a9E2lU"
access_token <- "2416344931-PS4bFHo5esnk3G3SH0OyRCOxgy5gpn8PQY58XJY"
access_secret <- "T6nLdFXeqRT3EAHzhH0YDmY9IVg6MVOIROUhaPCjp4a8z"
setup_twitter_oauth(consumer_key, consumer_secret)
setup_twitter_oauth(consumer_key, consumer_secret)
2
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
start <- getUser("@EUCourtPress")
friends_object <- lookupUsers(start$getFriendIDs())
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
friends_object
actors <- read.table("../data/nodes.csv", sep=",", header=T,stringsAsFactors=F)
read.table("../data/nodes.csv", sep=",", header=T,stringsAsFactors=F)
setwd("~/Documents/GitHub/dat_prot_sciencespo/R/code")
nodes <- read.table("../data/nodes.csv", sep=",", header=T,stringsAsFactors=F)
nodes$followers_count
range(nodes$followers_count)
which(nodes$followers_count<50)
length(which(nodes$followers_count<50))
#dropping connections who have less than 50 friends
length(which(nodes$followers_count<100))
#dropping connections who have less than 100 friends as too insignificant
length(which(nodes$followers_count<1000))
#dropping connections who have less than 1000 friends as too insignificant
nodes <- nodes[-which(nodes$followers_count<1000),]
names(nodes)
colmns <- c(
"user_id"          ,
"name"             ,
"screen_name"      ,
"location"         ,
"description"      ,
"protected"        ,
"followers_count"  ,
"friends_count"    ,
"listed_count"    ,
"created_at"      ,
"favourites_count",
"utc_offset"      ,
"time_zone"       ,
"geo_enabled"     ,
"verified"        ,
"statuses_count"  ,
"lang"            ,
"user"            ,
"Target"          ,
"Source"          ,
"Id" )
names(nodes) %in% colmns
which(names(nodes) %in% colmns)
nodes <- nodes[,which(names(nodes) %in% colmns)]
View(nodes)
write.csv(user_el, "../data/smaller_nodes.csv", row.names = T)
write.csv(nodes, "../data/smaller_nodes.csv", row.names = T)
